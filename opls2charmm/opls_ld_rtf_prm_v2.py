import os, sys, subprocess
import networkx as nx

'''
Author: Parveen Gartan
Date: 10 July 2024
'''

rtfs = ['126_charmm.rtf', '126_p3_charmm.rtf', '126_p2_charmm.rtf', '126_p4_charmm.rtf', '126_p5_charmm.rtf',] 
prms = ['126_charmm.prm', '126_p3_charmm.prm', '126_p2_charmm.prm', '126_p4_charmm.prm', '126_p5_charmm.prm',]  

RTF = {}
RTF['MASS'] = []
RTF['RESID'] = []
for f in range(len(rtfs)):
    RTF[f'ATOMS{f}'] = []
    RTF[f'BONDS{f}'] = []
    RTF[f'IMPRS{f}'] = []

ATs = []

try:
   os.remove('ld_tmp.rtf')
   os.remove('ld.rtf')
   os.remove('ld.prm')
except FileNotFoundError:
    print('File does not exists.')


out_rtf = open('ld_tmp.rtf', 'a') 
out_prm = open('ld.prm', 'a')

#---------------- rtf ---------------------------
out_rtf.write('!CHARMM rtf file generated by LigParGen program (israel.cabezadevaca@yale.edu) \n')
out_rtf.write('* \n')
out_rtf.write('  36 1 \n')

for f in range(len(rtfs)):
    rtf = open(f'{rtfs[f]}', 'r')
    for line in rtf:
        if line.startswith('MASS'):
           x = line.split()
           if x[2] not in ATs:
              out = f'{x[0]} -1 {x[2]} {x[3]}'
              AT = f'{x[2]}'
              #print(AT)
              ATs.append(AT)
           #out_rtf.write(f'{out} \n')
              RTF['MASS'].append(out)
        elif line.startswith('RESI'):
             RTF['RESID'].append(line)
        elif line.startswith('ATOM'):
             a = line.split()
             a = f'{a[0]} {a[1]}   {a[2]}  {a[3]}'
             RTF[f'ATOMS{f}'].append(a)
        elif line.startswith('BOND'):
             RTF[f'BONDS{f}'].append(line)
        elif line.startswith('IMPR'):
             RTF[f'IMPRS{f}'].append(line)
 
for mass in RTF['MASS']:
    out_rtf.write(mass)
    out_rtf.write('\n')

out_rtf.write('AUTO ANGLES DIHE \n')
out_rtf.write(f'\n')

for rtf in range(len(rtfs)):
    out_rtf.write(RTF['RESID'][rtf])
    for atoms in range(len(RTF[f'ATOMS{rtf}'])):
        out_rtf.write(RTF[f'ATOMS{rtf}'][atoms] +str('\n'))
    for bonds in RTF[f'BONDS{rtf}']:
        out_rtf.write(''.join(bonds))
    for impr in RTF[f'IMPRS{rtf}']:
        out_rtf.write(''.join(impr))
    out_rtf.write(f'\n')

out_rtf.write('PATCH FIRST NONE LAST NONE \n')
out_rtf.write('END \n')
out_rtf.write(f'\n')

#-------------------------------------------------------
#--------------- PRM -----------------------------------
out_prm.write('!--------------------------------------------- \n')
out_prm.write('!        Generated with LigParGen \n')
out_prm.write('!        William L. Jorgensen Lab \n')
out_prm.write('!     Author: israel.cabezadevaca@yale.edu \n')
out_prm.write('!    OPLS Force Field with CM1A derived Atomic Charges \n')
out_prm.write('!--------------------------------------------- \n')

out_prm.write('ATOM \n')
for mass in RTF['MASS']:
    out_prm.write(mass)
    out_prm.write('\n')

out_prm.write(f'\n')

BONDS    = []
ANGLES   = []
DIHE     = []
IMPR     = []
NONBOND  = []
## checks for duplicates
G_bonds = nx.Graph()
G_angs  = nx.Graph()
G_dihe  = nx.Graph()
G_impr  = nx.Graph()
G_nb    = nx.Graph()

for f in range(len(prms)):
    prm = open(prms[f], 'r')
    for line in prm:
        if line[0:4] == 'BOND':
           for line in prm:
               if line[0:5] == 'ANGLE':
                  break
               elif len(line.strip()) == 0 :
                  break
               x = line.split()
               if not G_bonds.has_edge(x[0], x[1]):
                  G_bonds.add_edge(x[0], x[1], fc=x[2], r=x[3])
                  out = f'{x[0]} {x[1]} {x[2]} {x[3]}  !{prm.name}'
                  BONDS.append(out)
        elif line[0:5] == 'ANGLE':
             for line in prm:
                 if line[0:8] == 'DIHEDRAL':
                    break
                 elif len(line.strip()) == 0 :
                    break
                 y = line.split()
                 if not G_angs.has_edge(y[0], y[2]):
                    G_angs.add_edge(y[0], y[2], fc=y[3], theta=y[4])
                    y = f'{y[0]} {y[1]} {y[2]} {y[3]} {y[4]}  !{prm.name}'
                    ANGLES.append(y)
                 else:
                     if G_angs.get_edge_data(y[0], y[2])['fc'] != y[3]:
                        y = f'{y[0]} {y[1]} {y[2]} {y[3]} {y[4]}  !{prm.name}'
                        ANGLES.append(y)
                     elif G_angs.get_edge_data(y[0], y[2])['theta'] != y[4]:
                          y = f'{y[0]} {y[1]} {y[2]} {y[3]} {y[4]}  !{prm.name}'
                          ANGLES.append(y) 
        elif line[0:8] == 'DIHEDRAL':
             for line in prm:
                 if line[0:8] == 'IMPROPER':
                    break
                 elif len(line.strip()) == 0 :
                     break
                 elif line[0] == '!':
                     break
                 z = line.split()
## check duplicate dihedrals
                 if not G_dihe.has_edge(z[0], z[3]):
                    G_dihe.add_edge(z[0], z[3], fc=z[4], ml=z[5], phase=z[6])
                    z = f'{z[0]} {z[1]} {z[2]} {z[3]} {z[4]} {z[5]} {z[6]}  !{prm.name}'
                    DIHE.append(z)
                 else:
                     if G_dihe.get_edge_data(z[0], z[3])['fc'] != z[4]:
                        z = f'{z[0]} {z[1]} {z[2]} {z[3]} {z[4]} {z[5]} {z[6]}  !{prm.name}'
                        DIHE.append(z)
                     elif G_dihe.get_edge_data(z[0], z[3])['ml'] != z[5]:
                        z = f'{z[0]} {z[1]} {z[2]} {z[3]} {z[4]} {z[5]} {z[6]}  !{prm.name}'
                        DIHE.append(z)
                     elif G_dihe.get_edge_data(z[0], z[3])['phase'] != z[6]:
                        z = f'{z[0]} {z[1]} {z[2]} {z[3]} {z[4]} {z[5]} {z[6]}  !{prm.name}'
                        DIHE.append(z)                    

        elif line[0:8] == 'IMPROPER':
             for line in prm:
                 if line[0:9] == 'NONBONDED':
                    break
                 elif len(line.strip()) == 0 :
                    break
                 elif line[0] == '!':
                    break
                 m = line.split()
                 #print(f'{m} ! {prm[f].name}\n')
                 if not G_impr.has_edge(m[0], m[3]):
                    G_impr.add_edge(m[0], m[3], fc=m[4], ml=m[5], phase=m[6])
                    m = f'{m[0]} {m[1]} {m[2]} {m[3]} {m[4]} {m[5]} {m[6]}  !{prm.name}'
                    IMPR.append(m)
                 else:
                     if G_impr.get_edge_data(m[0], m[3])['fc'] != m[4]:
                        m = f'{m[0]} {m[1]} {m[2]} {m[3]} {m[4]} {m[5]} {m[6]}  !{prm.name}'
                        IMPR.append(m)
             
        elif line[0:5] == 'cutnb':
             for line in prm: 
                if len(line.strip()) == 0 :
                   break
                n = line.split()
                if not G_nb.has_node(n[0]):
                   G_nb.add_node(n[0])
                   n = f'{n[0]} {n[1]} {n[2]} {n[3]} {n[4]} {n[5]} {n[6]}  !{prm.name}'
                   NONBOND.append(n)

##------------------------------------------

out_prm.write('BOND \n')
for bond in BONDS:
    out_prm.write(f'{bond} \n')
out_prm.write(f'\n')

out_prm.write('ANGLE \n')
for angle in ANGLES:
    out_prm.write(f'{angle} \n')
out_prm.write(f'\n')

out_prm.write('DIHEDRAL \n')
for dihe in DIHE:
    out_prm.write(f'{dihe} \n')
out_prm.write(f'\n')

out_prm.write('IMPROPER \n')
for impr in IMPR:
    out_prm.write(f'{impr} \n')
out_prm.write(f'\n')

out_prm.write(f'NONBONDED nbxmod 5 atom cdiel switch vatom vdistance vswitch - \n')
out_prm.write(f'cutnb 14.0 ctofnb 12.0 ctonnb 11.5 eps 1.0 e14fac 0.5  geom \n')

for nonb in NONBOND:
    out_prm.write(f'{nonb} \n')
out_prm.write(f'\n')
out_prm.write(f'END \n')


#quit()

##-------- CHARMM duplicate parameters check--------
#out_rtf.close()
#out_prm.close()

#charmmrun = f'/net/orinoco/pga043/charmm_nonstd/new_charmm/build_blade/charmm -i test.inp'
#subprocess.check_call(charmmrun, shell=True)

#quit()
#----------------------------------------------------

#-----------------------------------------------
#------------ add group definitions ------------
out_rtf.close()

os.system('./regroup.awk ld_tmp.rtf >> ld.rtf')

try:
    os.remove('ld_tmp.rtf')
except FileNotFoundError:
     print('No junk files exist.')

quit()
